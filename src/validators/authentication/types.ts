// Common types for the authentication validation module

// Define authentication error codes
export enum ApiKeyErrorCode {
    APIKEY_REQUIRED = 'APIKEY_REQUIRED',
    APIKEY_TOO_SHORT = 'APIKEY_TOO_SHORT',
    APIKEY_TOO_LONG = 'APIKEY_TOO_LONG',
    INVALID_APIKEY_FORMAT = 'INVALID_APIKEY_FORMAT',
    INVALID_APIKEY_PREFIX = 'INVALID_APIKEY_PREFIX'
  }
  
  export enum TwoFactorErrorCode {
    TWOFACTOR_REQUIRED = 'TWOFACTOR_REQUIRED',
    TWOFACTOR_CODE_REQUIRED = 'TWOFACTOR_CODE_REQUIRED',
    INVALID_TWOFACTOR_LENGTH = 'INVALID_TWOFACTOR_LENGTH',
    INVALID_TWOFACTOR_FORMAT = 'INVALID_TWOFACTOR_FORMAT',
    INVALID_TWOFACTOR_TYPE = 'INVALID_TWOFACTOR_TYPE',
    TWOFACTOR_EXPIRED = 'TWOFACTOR_EXPIRED'
  }
  
  export enum TokenErrorCode {
    TOKEN_REQUIRED = 'TOKEN_REQUIRED',
    TOKEN_TOO_SHORT = 'TOKEN_TOO_SHORT',
    TOKEN_TOO_LONG = 'TOKEN_TOO_LONG',
    INVALID_JWT_FORMAT = 'INVALID_JWT_FORMAT',
    INVALID_TOKEN_PREFIX = 'INVALID_TOKEN_PREFIX',
    TOKEN_EXPIRED = 'TOKEN_EXPIRED'
  }
  
  export enum UsernameErrorCode {
    USERNAME_REQUIRED = 'USERNAME_REQUIRED',
    USERNAME_TOO_SHORT = 'USERNAME_TOO_SHORT',
    USERNAME_TOO_LONG = 'USERNAME_TOO_LONG',
    USERNAME_CONTAINS_SPACES = 'USERNAME_CONTAINS_SPACES',
    INVALID_USERNAME_FORMAT = 'INVALID_USERNAME_FORMAT',
    USERNAME_BLOCKED = 'USERNAME_BLOCKED'
  }
  
  export enum PasswordErrorCode {
    PASSWORD_REQUIRED = 'PASSWORD_REQUIRED',
    PASSWORD_TOO_SHORT = 'PASSWORD_TOO_SHORT',
    PASSWORD_TOO_LONG = 'PASSWORD_TOO_LONG',
    PASSWORD_REQUIRES_UPPERCASE = 'PASSWORD_REQUIRES_UPPERCASE',
    PASSWORD_REQUIRES_LOWERCASE = 'PASSWORD_REQUIRES_LOWERCASE',
    PASSWORD_REQUIRES_NUMBER = 'PASSWORD_REQUIRES_NUMBER',
    PASSWORD_REQUIRES_SPECIAL_CHAR = 'PASSWORD_REQUIRES_SPECIAL_CHAR',
    PASSWORD_TOO_COMMON = 'PASSWORD_TOO_COMMON',
    PASSWORD_CONTAINS_USERNAME = 'PASSWORD_CONTAINS_USERNAME'
  }
  
  // Authentication types
  export type TwoFactorType = 'totp' | 'sms' | 'email' | 'app';
  
  // Credential information type
  export interface AuthCredentials {
    username?: string;
    password?: string;
    apiKey?: string;
    token?: string;
    twoFactorCode?: string;
    twoFactorType?: TwoFactorType;
  }